        - """
        -     Homogeneous Hidden Pairwise Markov Model
        - """
        - 
        - struct ReshapedCategorical <: Sampleable{Multivariate , Discrete } 
        1     d::Categorical
        -     U::Int
        -     X::Int
        - end
        - 
        - struct TransitionDistribution <: Sampleable{Multivariate , Discrete } 
        -     mat::AbstractArray{<:Real}
        -     U::Int
        -     X::Int
        - 
        1     TransitionDistribution(
        -         tmat::AbstractArray{<:Real}
        -         ) = new(tmat, size(tmat)[1],size(tmat)[2])
        - end
        - 
        - struct EmissionDistribution <: Sampleable{Univariate, Discrete }
        2     emission::Normal
        -     U::Int
        -     X::Int
        - end
        - 
        - struct HPMM <: Sampleable{Univariate , Continuous }
        1     P_first::ReshapedCategorical
        -     P_tr::TransitionDistribution
        -     P_em::EmissionDistribution
        - end
        - 
        - # Constructors
        - 
        1 function createFirstDistribution(U::Int, X::Int)
        0     """
        -     Dirichlet alphas are currently 1,2,...,U*X due to happenstance.
        -     """
        0     begin
        1         Vector(1:U*X) |> 
        -         Dirichlet |> 
        -         rand |> 
        1         (x -> Categorical(x)) |> 
        1         (d -> ReshapedCategorical(d, U, X))
        -     end
        - end
        - 
        1 function createTransitionDistribution(U::Int, X::Int)
        0     """
        -     Weights sampling fixed for now.
        -         For random fixed i,j sum[:,:,i,j] == 1
        -     """
        1     mat = reshape( rand(Dirichlet(1:U*X),U*X), (U,X,U,X))
        1     TransitionDistribution(mat)
        - end
        - 
        2 function createEmissionDistribution(U::Int, X::Int)
        2     EmissionDistribution(Normal(),U,X)
        - end
        - 
        - # Overrides
        - 
        1 function Base.rand(rc::ReshapedCategorical)
        1     i = rand(rc.d)
        1     reshapeIndex(i, rc.U, rc.X)
        - end
        - 
        1 function Base.rand(td::TransitionDistribution, uprev::Int, xprev::Int)
        -     
        1     w = td.mat[:,:,uprev,xprev] |> flatten |> Weights
        1     s = sample(1:td.U*td.X, w)
        1     reshapeIndex(s, td.U, td.X)
        - end
        - 
        1 function Base.rand(ed::EmissionDistribution, u::Int, x::Int)
        1     noise = rand(ed.emission)
        1     x + noise
        - end
        - 
        - # Helpers
        - 
        2 function reshapeIndex(i::Int, U::Int, X::Int)
        2     i = i-1
        2     j = (i%U)+1
        2     k = div(i,U)+1
        2     j,k
        - end
        - 
        - function reshapeIndex(t::Tuple{Int, Int}, U, X)
        -     (t[2]-1)*U + t[1]
        - end
        - 
        - function getWeights(rc::ReshapedCategorical)
        -     reshape(rc.d.p, (rc.U, rc.X))
        - end
        - 
        1 function flatten(x::AbstractArray{<:Real}) reduce(vcat, x) end
        - 
        - # function pdf(d::EmissionDistribution,u::Int,x::Int,y<:Real)
        - #     pdf(d.Y_distr, )
        - # end
